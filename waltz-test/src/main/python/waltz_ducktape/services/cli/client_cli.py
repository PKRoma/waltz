from waltz_ducktape.services.cli.base_cli import Cli


class ClientCli(Cli):
    """
    ClientCli is an utility class to interact with com.wepay.waltz.tools.client.ClientCli.
    """
    def __init__(self, cli_config_path):
        """
        Construct a new 'ClientCli' object.

        :param cli_config_path: The path to client cli config file
        """
        super(ClientCli, self).__init__(cli_config_path)

    def validate_txn_cmd(self, log_file_path, num_active_partitions, txn_per_client, num_clients, interval):
        """
        Return validation cli command to submit and validate transactions, which
        includes validating high water mark, transaction data and optimistic lock.

        java com.wepay.waltz.tools.client.ClientCli \
            validate \
            --txn-per-client <number of transactions per client> \
            --num-clients <number of total clients> \
            --interval <average interval(millisecond) between transactions> \
            --cli-config-path <client cli config file path> \
            --num-active-partitions <number of partitions to interact with>
        """
        cmd_arr = [
            "java -Dlog4j.configuration=file:{}".format(log_file_path), self.java_cli_class_name(),
            "validate",
            "--txn-per-client", txn_per_client,
            "--num-clients", num_clients,
            "--interval", interval,
            "--cli-config-path", self.client_config_path,
            "--num-active-partitions {}".format(num_active_partitions) if num_active_partitions is not None else ""
        ]
        return self.build_cmd(cmd_arr)

    def create_producer_cmd(self, log_file_path, txn_per_client, interval, num_active_partitions):
        """
        Return producer cli command to submit client transactions in a single process,
        which includes validation of each and every transaction successful completion.

        java com.wepay.waltz.tools.client.ClientCli \
            create-producer \
            --txn-per-client <number of transactions to be generated by this producer> \
            --interval <average interval(millisecond) between transactions> \
            --cli-config-path <client cli config file path>
        """
        cmd_arr = [
            "java -Dlog4j.configuration=file:{}".format(log_file_path), self.java_cli_class_name(),
            "create-producer",
            "--txn-per-client", txn_per_client,
            "--interval", interval,
            "--num-active-partitions {}".format(num_active_partitions) if num_active_partitions is not None else "",
            "--cli-config-path", self.client_config_path
        ]
        return self.build_cmd(cmd_arr)

    def create_consumer_cmd(self, log_file_path, txn_per_client, num_active_partitions):
        """
        Return consumer cli command to create a consumer client process, which reads
        transactions stored in waltz. Validation is successful if consumer consumes
        specified number of transactions.

        java com.wepay.waltz.tools.client.ClientCli \
            create-consumer \
            --txn-per-client <number of transactions to be consumed by this consumer> \
            --interval <average interval(millisecond) between transactions> \
            --cli-config-path <client cli config file path>
        """
        cmd_arr = [
            "java -Dlog4j.configuration=file:{}".format(log_file_path), self.java_cli_class_name(),
            "create-consumer",
            "--txn-per-client", txn_per_client,
            "--num-active-partitions {}".format(num_active_partitions) if num_active_partitions is not None else "",
            "--cli-config-path", self.client_config_path
        ]
        return self.build_cmd(cmd_arr)

    def java_cli_class_name(self):
        return "com.wepay.waltz.tools.client.ClientCli"
